name: Update Yakit Version

on:
  schedule:
    # 每天早上 8 点检查更新
    - cron: '0 8 * * *'
  workflow_dispatch: # 允许手动触发
    inputs:
      force_update:
        description: 'Force update even if version is the same'
        required: false
        type: boolean
        default: false

jobs:
  update-yakit:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'

    - name: Check for new Yakit version
      id: check_version
      run: |
        # 首先尝试从 GitHub Releases 获取最新版本
        echo "Fetching latest version from GitHub Releases..."
        GITHUB_VERSION=$(curl -s "https://api.github.com/repos/yaklang/yakit/releases/latest" | grep '"tag_name"' | sed -E 's/.*"tag_name": "([^"]+)".*/\1/' | sed 's/^v//')

        if [ -n "$GITHUB_VERSION" ] && [ "$GITHUB_VERSION" != "null" ]; then
          LATEST_VERSION="$GITHUB_VERSION"
          echo "✅ Got version from GitHub: $LATEST_VERSION"
        else
          # 回退到原始 URL
          echo "⚠️  Failed to get version from GitHub, trying backup URL..."
          LATEST_VERSION=$(curl -s "https://oss-qn.yaklang.com/yak/latest/yakit-version.txt" | tr -d '\n')

          if [ -z "$LATEST_VERSION" ]; then
            echo "❌ Failed to fetch latest version from both sources"
            exit 1
          fi
          echo "✅ Got version from backup URL: $LATEST_VERSION"
        fi

        # 读取当前本地版本
        if [ -f "latest-version.txt" ]; then
          CURRENT_VERSION=$(cat latest-version.txt | tr -d '\n')
        else
          CURRENT_VERSION="1.4.4-0912"
        fi

        echo "Current local version: $CURRENT_VERSION"
        echo "Latest remote version: $LATEST_VERSION"
        echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

        # 检查是否需要更新
        if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ] || [ "${{ github.event.inputs.force_update }}" = "true" ]; then
          echo "needs_update=true" >> $GITHUB_OUTPUT
          echo "🔄 Version update needed: $CURRENT_VERSION → $LATEST_VERSION"
        else
          echo "needs_update=false" >> $GITHUB_OUTPUT
          echo "✅ Already up to date: $CURRENT_VERSION"
        fi

    - name: Update version files
      if: steps.check_version.outputs.needs_update == 'true'
      run: |
        LATEST_VERSION="${{ steps.check_version.outputs.latest_version }}"
        CURRENT_VERSION="${{ steps.check_version.outputs.current_version }}"
        TODAY=$(date +%Y-%m-%d)

        echo "🔄 Updating version files..."
        echo "   From: $CURRENT_VERSION"
        echo "   To:   $LATEST_VERSION"
        echo "   Date: $TODAY"

        # 更新 latest-version.txt
        echo "$LATEST_VERSION" > latest-version.txt
        echo "✅ Updated latest-version.txt"

        # 更新 history-versions.txt
        if [ -f "history-versions.txt" ]; then
          # 检查是否已存在该版本记录
          if ! grep -q "^$LATEST_VERSION|" history-versions.txt; then
            # 添加新版本到历史记录
            echo "$LATEST_VERSION|$TODAY|github-auto-update" >> history-versions.txt
            echo "✅ Added $LATEST_VERSION to history"
          else
            echo "ℹ️  Version $LATEST_VERSION already exists in history"
          fi
        else
          # 创建历史文件
          echo "# Yakit Version History" > history-versions.txt
          echo "# Format: version|date|source" >> history-versions.txt
          echo "# Data sourced from: https://github.com/yaklang/yakit/releases" >> history-versions.txt
          echo "$LATEST_VERSION|$TODAY|github-auto-update" >> history-versions.txt
          echo "✅ Created history-versions.txt"
        fi

        # 显示更新后的文件内容
        echo ""
        echo "📄 Current latest-version.txt:"
        cat latest-version.txt
        echo ""
        echo "📚 Recent history-versions.txt entries:"
        tail -3 history-versions.txt

        # 更新上游 cask 文件版本
        echo "📝 Updating upstream cask file..."
        sed -i.bak "s/version \"[^\"]*\"/version \"$LATEST_VERSION\"/" Casks/yakit-upstream.rb
        rm -f Casks/yakit-upstream.rb.bak
        echo "✅ Updated yakit-upstream.rb"

        echo ""
        echo "🎉 Version files updated successfully!"

    - name: Test and validate cask
      if: steps.check_version.outputs.needs_update == 'true'
      run: |
        echo "🔍 Testing cask installation and validation..."
        
        # 验证 cask 语法
        echo "📋 Validating cask syntax..."
        brew audit --cask --strict Casks/yakit.rb
        
        # 测试本地 cask 安装
        echo "🧪 Testing local cask installation..."
        brew install --cask ./Casks/yakit.rb --dry-run
        
        # 如果 dry-run 成功，进行实际安装测试
        if [ $? -eq 0 ]; then
          echo "✅ Dry-run successful, attempting real installation..."
          brew install --cask ./Casks/yakit.rb
          
          # 验证安装是否成功
          if [ -d "/Applications/Yakit.app" ]; then
            echo "✅ Yakit.app successfully installed to /Applications/"
            
            # 清理测试安装
            echo "🧹 Cleaning up test installation..."
            brew uninstall --cask yakit || true
          else
            echo "❌ Installation failed: Yakit.app not found in /Applications/"
            exit 1
          fi
        else
          echo "❌ Dry-run failed"
          exit 1
        fi

    - name: Commit and push changes
      if: steps.check_version.outputs.needs_update == 'true'
      run: |
        LATEST_VERSION="${{ steps.check_version.outputs.latest_version }}"
        CURRENT_VERSION="${{ steps.check_version.outputs.current_version }}"

        # 配置 git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        # 添加文件到 git
        git add latest-version.txt history-versions.txt Casks/yakit-upstream.rb

        # 检查是否有更改
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi

        # 提交更改
        git commit -m "chore: update Yakit to version $LATEST_VERSION - auto-generated"

        # 推送到主分支
        git push origin main

        echo "✅ Successfully updated Yakit to version $LATEST_VERSION"

    - name: Create PR to homebrew-cask (if needed)
      if: steps.check_version.outputs.needs_update == 'true'
      run: |
        LATEST_VERSION="${{ steps.check_version.outputs.latest_version }}"
        
        echo "🍺 Preparing PR to homebrew-cask..."
        
        # 克隆 homebrew-cask 仓库
        git clone https://github.com/Homebrew/homebrew-cask.git homebrew-cask-repo
        cd homebrew-cask-repo
        
        # 配置 git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # 创建新分支
        BRANCH_NAME="update-yakit-$LATEST_VERSION"
        git checkout -b "$BRANCH_NAME"
        
        # 复制标准版本的 cask 文件到 homebrew-cask
        cp ../Casks/yakit-upstream.rb Casks/yakit.rb
        
        # 验证在 homebrew-cask 环境中的语法
        echo "📋 Validating cask in homebrew-cask environment..."
        brew audit --cask --strict Casks/yakit.rb
        
        if [ $? -eq 0 ]; then
          echo "✅ Cask validation successful in homebrew-cask"
          
          # 提交更改
          git add Casks/yakit.rb
          git commit -m "yakit: update to $LATEST_VERSION" -m "Automatic architecture detection (ARM64/Intel)" -m "Verified installation on macOS"
          
          echo "📝 Changes committed to branch $BRANCH_NAME"
          echo "🔄 Ready for PR creation to homebrew-cask"
          echo ""
          echo "Manual steps to complete:"
          echo "1. Push branch to your homebrew-cask fork"
          echo "2. Create PR from your fork to Homebrew/homebrew-cask"
          echo "3. Follow homebrew-cask contribution guidelines"
          
        else
          echo "❌ Cask validation failed in homebrew-cask environment"
          exit 1
        fi

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Yakit update workflow failed"
        echo "Please check the workflow logs for details"
        echo ""
        echo "Common issues to check:"
        echo "- Network connectivity to GitHub API"
        echo "- Cask syntax validation"
        echo "- Download URL availability"
        echo "- File permissions and git configuration"