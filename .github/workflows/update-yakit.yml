name: Update Yakit Version

on:
  schedule:
    # 每天早上 8 点检查更新
    - cron: '0 8 * * *'
  workflow_dispatch: # 允许手动触发
    inputs:
      force_update:
        description: 'Force update even if version is the same'
        required: false
        type: boolean
        default: false

jobs:
  update-yakit:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'

    - name: Check for new Yakit version
      id: check_version
      run: |
        # 获取最新版本号
        LATEST_VERSION=$(curl -s "https://oss-qn.yaklang.com/yak/latest/yakit-version.txt" | tr -d '\n')

        if [ -z "$LATEST_VERSION" ]; then
          echo "Failed to fetch latest version"
          exit 1
        fi

        echo "Latest version: $LATEST_VERSION"

        # 读取当前本地版本
        if [ -f "latest-version.txt" ]; then
          CURRENT_VERSION=$(cat latest-version.txt | tr -d '\n')
        else
          CURRENT_VERSION="1.4.4-0912"
        fi

        echo "Current version: $CURRENT_VERSION"
        echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

        # 检查是否需要更新
        if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ] || [ "${{ github.event.inputs.force_update }}" = "true" ]; then
          echo "needs_update=true" >> $GITHUB_OUTPUT
        else
          echo "needs_update=false" >> $GITHUB_OUTPUT
        fi

    - name: Update version files
      if: steps.check_version.outputs.needs_update == 'true'
      run: |
        LATEST_VERSION="${{ steps.check_version.outputs.latest_version }}"
        CURRENT_VERSION="${{ steps.check_version.outputs.current_version }}"
        TODAY=$(date +%Y-%m-%d)

        echo "Updating from $CURRENT_VERSION to $LATEST_VERSION"

        # 更新 latest-version.txt
        echo "$LATEST_VERSION" > latest-version.txt

        # 更新 history-versions.txt
        if [ -f "history-versions.txt" ]; then
          # 添加新版本到历史记录
          echo "$LATEST_VERSION|$TODAY|auto-update" >> history-versions.txt
        else
          # 创建历史文件
          cat > history-versions.txt << EOF
# Yakit Version History
# Format: version|date|source
$LATEST_VERSION|$TODAY|auto-update
EOF
        fi

        echo "Version files updated successfully"

    - name: Validate cask syntax
      if: steps.check_version.outputs.needs_update == 'true'
      run: |
        # 安装 homebrew (在 Ubuntu 上)
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

        # 添加 Homebrew 到 PATH
        echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH

        # 验证 cask 语法
        brew cask audit Casks/yakit.rb

    - name: Commit and push changes
      if: steps.check_version.outputs.needs_update == 'true'
      run: |
        LATEST_VERSION="${{ steps.check_version.outputs.latest_version }}"
        CURRENT_VERSION="${{ steps.check_version.outputs.current_version }}"

        # 配置 git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        # 添加文件到 git
        git add latest-version.txt history-versions.txt

        # 检查是否有更改
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi

        # 提交更改
        git commit -m "chore: update Yakit to version $LATEST_VERSION

- Updated from $CURRENT_VERSION to $LATEST_VERSION
- Auto-generated by GitHub Actions

✅ Version fetched from official source
✅ Cask syntax validated
✅ Files updated: latest-version.txt, history-versions.txt"

        # 推送到主分支
        git push origin main

        echo "✅ Successfully updated Yakit to version $LATEST_VERSION"

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Yakit update workflow failed"
        echo "Please check the workflow logs for details"
